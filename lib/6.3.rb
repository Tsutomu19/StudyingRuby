/正規表現/

regex = /|d{3}-\d{4}/
regex.class
正規表現はRegexpクラスのオブジェクトになります。


regex = /\d{3}-\d{4}/

'123-4567'=~ /\d{3}-\d{4}/
# =>0
'hello' =~ /\d{3}-\d{4}/
# => nil

if '123-4567' =~ /\d{3}-\d{4}/
    puts 'マッチしました'
else
    puts'マッチしませんでした'
end

また、=~は文字列と正規表現を入れ替えても同じ結果になります(ただし例外ある)


/\d{3}-\d{4}/ =~ '123-4567'
/\d{3}-\d{4}/ =~ 'hello'

!~を使うとマッチしなかった時にtrueをマッチした時にfalseを返します

'hello'!~/\d{3}-\d{4}/

6.3.1 Rubularで視覚的にマッチする文字列を確認する

正規表現が得意な人でも試行錯誤することがある。
そんなんときは正規表現にマッチする文字列を視覚的に確認できるオンラインツールを使うと便利です。

+は直前の文字が一個以上



私の電話番号は090-8908-8879です


\dは半角数字一文字を表す


6.3.2 正規表現のキャプチャを利用する

私の誕生日は1977年7月17日です。

この中の数字を取り出す



\d+年\d＋月\d+日
このままだと1977年7月17日という一続きの文字列にマッチしたことになります
さらに年と月とひを分解する必要が
ある。

こんな時は正規表現のキャプチャ機能を使うと便利です
キャプチャは()を追加って抜き出したい部分を指定


(\d+)年(\d+)月(\d+)日


Match groups:

1.	1977
2.	7
3.	17

rubyでも同じことができる



text ='私の誕生日は1977年7月17日です。'
m = /(\d+)年(\d+)月(\d+)日/.match(text)
m[1]
m[2]
m[3]
上記のコードのようにキャプチャを活用する方法の一つはmatchメソッドを使うことです
文字列が正規表現にマッチするとmatchDataオブジェクトが帰ります。マッチしない場合はnilがカエル







/(\d+)年(\d+)月(\d+)日/.match(text)
/(\d+)年(\d+)月(\d+)日/.match('foo')

この性質を使って、条件分岐のなかで真偽値の判定とローカル変数への代入を同時にやってしまうコードがよく使われます



text = '私の誕生日は1977年7月17日です。'
if m = /(\d+)年(\d+)月(\d+)日/.match(text)
    マッチした場合の処理
else
    マッチしなかった場合の処理
end


MatchDataは[]を使って正規表現の処理結果を配列と同じような方法で取得できます

text = '私の誕生日は1977年7月17日です'
m = /(\d+)年(\d+)月(\d+)日/.match(text)
# マッチした部分全体を取得する
n[0]
# キャプチャの一番めを取得する
m[1]
# キャプチャの2番目から二個取得する
m[2,2]
# 最後のキャプチャを取得する
m[-1]
# rangeを使って取得する
m[1..3]

なおmatchメソッドはStringクラスとRegexpクラスの両方に定義されているため、文字列と正規表現オブジェクトを入れ替えtも同じように動作します。


text = '私の誕生日は1977年7月17日です。'
m = text.match(/(\d+)年(\d+)月(\d+)日/)








